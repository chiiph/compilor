package Proyecto2;

import java_cup.runtime.*;
import java.io.*;
import java.lang.Exception;

action code
{:
    SymbolTable table;
    Drawer      drawer = new Drawer();
:}

parser code
{:
	public static void main(String args[])
	{
		try {
			new parser(new Yylex(System.in)).parse();
		} catch (Exception e)	{
			System.err.println(e.getMessage());
		}
	}
:}

terminal EXIT, SCOLON, ASSIGNMENT, COMMA, CLEAR, SETCOLOR, IF, PAREN_OPEN, PAREN_CLOSE;
terminal ELSE, REPEAT, TIMES, DRAW, MOVE;
terminal CONDITIONAL_OR, CONDITIONAL_AND, EQUALS, NOT_EQUALS, LT, GT, LT_EQ, GT_EQ, ADD, SUB;
terminal MUL, DIV, MOD, NOT, DEF, ANGLE;
terminal Integer INT_LITERAL;
terminal String ID;

non terminal programa;
non terminal String expression;
non terminal lista_sentencias, sentencia;
non terminal sentencia_dib;
non terminal String conditional_expression;
non terminal String conditional_or_expression;
non terminal String conditional_and_expression;
non terminal String equality_expression;
non terminal String relational_expression;
non terminal String additive_expression;
non terminal String multiplicative_expression;
non terminal String unary_expression;
non terminal String unary_expression_not_plus_minus;
non terminal String postfix_expression;
non terminal lista_sentencias_dib;

precedence left ADD;
precedence left SUB;
precedence left MUL;
precedence left DIV;
precedence left MOD;
precedence right ELSE;

programa              ::= lista_sentencias EXIT
                        ;
lista_sentencias      ::= sentencia
                        | lista_sentencias SCOLON sentencia
                        ;
sentencia ::= ID ASSIGNMENT expression
|   sentencia_dib
|   CLEAR 
    {: 
    drawer.reset() 
    :}
|   SETCOLOR expression:r COMMA expression:g COMMA expression:b
    {:
    OurSymbol res_r = table.get(r);
    OurSymbol res_g = table.get(g);
    OurSymbol res_b = table.get(b);
    drawer.setColor(res_r.getValue(), res_g.getValue(), res_b.getValue());
    :}
|   IF PAREN_OPEN expression:e {: :} PAREN_CLOSE sentencia_dib
    {:
    :}
|   IF PAREN_OPEN expression:e {: :} PAREN_CLOSE sentencia_dib ELSE sentencia_dib
    {:
    :}
|   REPEAT PAREN_OPEN expression:e {: :} PAREN_CLOSE TIMES sentencia_dib
    {:
    :}
;

sentencia_dib ::= 
    DRAW expression:e 
    {: 
    /*
    draw, int = avazar el cursor ang unidades
    draw, did = reproducir un dibujo almacenado
    */
    OurSymbol res = table.get(e)
    if (res.getType().equals("int")) {
        drawer.draw(res.getValue()); 
    }
    else if (res.getType().equals("draw_id")) {
        drawer.drawNameDraw(res.getValue());
    }
    :}
|   MOVE expression:e 
    {:
    /*
    move, int = avanzar el cursor ang unidades sin dibujar
    move, ang = rotar el cursor
    */
    OurSymbol res= table.get(res.getValue())
    if (res.getType().equals("int")) {
        drawer.move(res.getValue()) 
    }
    else if (res.getType().equals("angle")) {
        drawer.rotate(res.getValue()) 
    } 
    :}
;

expression                         ::= conditional_expression:e {: System.out.println("Expression: "+e); :}
                                     ;
conditional_expression             ::= conditional_or_expression {: System.out.println("aaaapa"); :}
                                     ;
conditional_or_expression          ::= conditional_and_expression
                                     | conditional_or_expression CONDITIONAL_OR conditional_and_expression
                                     ;
conditional_and_expression         ::= equality_expression
                                     | conditional_and_expression CONDITIONAL_AND equality_expression
                                     ;
equality_expression                ::= relational_expression
                                     | equality_expression EQUALS relational_expression
                                     | equality_expression NOT_EQUALS relational_expression
                                     ;
relational_expression              ::= additive_expression
                                     | relational_expression LT additive_expression
                                     | relational_expression GT additive_expression
                                     | relational_expression LT_EQ additive_expression
                                     | relational_expression GT_EQ additive_expression
                                     ;
additive_expression                ::= multiplicative_expression
                                     | additive_expression ADD multiplicative_expression
                                     | additive_expression SUB multiplicative_expression
                                     ;
multiplicative_expression          ::= unary_expression
                                     | multiplicative_expression MUL unary_expression
                                     | multiplicative_expression DIV unary_expression
                                     | multiplicative_expression MOD unary_expression
                                     ;
unary_expression                   ::= ADD unary_expression
                                     | SUB unary_expression
                                     | unary_expression_not_plus_minus
                                     ;
unary_expression_not_plus_minus    ::= postfix_expression
                                     | NOT unary_expression
                                     ;
postfix_expression ::=
ID:id
{:
if(table.isDeclared(id))
    RESULT = id;
else
    throw new Exception("Varible no declarada: "+id);
:}
| INT_LITERAL ANGLE
| INT_LITERAL:lit
{:
    System.out.println("it's a-me, an innttt"+lit);
    RESULT = table.addAnonymVar("int", lit);
:}
| DEF PAREN_OPEN lista_sentencias_dib PAREN_CLOSE
;

lista_sentencias_dib               ::= sentencia_dib
                                     | lista_sentencias_dib SCOLON sentencia_dib
                                     ;
