package Proyecto2;

import java_cup.runtime.*;
import java.io.*;
import java.lang.Exception;

action code
{:
    private SymbolTable table = new SymbolTable();
    OurDrawer ourDrawer = new OurDrawer();
:}

parser code
{:
    public static void main(String args[])
    {
        try {
            new parser(new Yylex(System.in)).parse();
        } catch (Exception e)   {
            System.err.println(e.getMessage());
        }
    }
:}

terminal EXIT, SCOLON, ASSIGNMENT, COMMA, CLEAR, SETCOLOR, IF, PAREN_OPEN, PAREN_CLOSE;
terminal ELSE, REPEAT, TIMES, DRAW, MOVE;
terminal CONDITIONAL_OR, CONDITIONAL_AND, EQUALS, NOT_EQUALS, LT, GT, LT_EQ, GT_EQ, ADD, SUB;
terminal MUL, DIV, NOT, DEF, ANGLE;
terminal Integer INT_LITERAL;
terminal String ID;

non terminal programa;
non terminal String expression;
non terminal lista_sentencias, sentencia;
non terminal sentencia_dib;
non terminal String postfix_expression;
non terminal lista_sentencias_dib;

precedence left ADD, SUB;
precedence left MUL, DIV;
precedence left CONDITIONAL_AND;
precedence left CONDITIONAL_OR;
precedence left GT, LT, GT_EQ, LT_EQ;
precedence left EQUALS, NOT_EQUALS;
precedence right ELSE;

programa ::=
    lista_sentencias EXIT
    ;
lista_sentencias ::= 
    sentencia
    | lista_sentencias SCOLON sentencia
    ;

sentencia ::= 
    ID ASSIGNMENT expression:e 
        {: 
        System.out.println(table.get(e).getValue()); 
        :}
    | sentencia_dib
    | CLEAR
        {:
        drawer.reset()
        :}
    | SETCOLOR expression COMMA expression COMMA expression
        {:
        OurSymbol res_r = table.get(r);
        OurSymbol res_g = table.get(g);
        OurSymbol res_b = table.get(b);
        drawer.setColor(res_r.getValue(), res_g.getValue(), res_b.getValue());
        :}
    | IF PAREN_OPEN expression:econd PAREN_CLOSE sentencia_dib:then 
        {:
        OurSymbol cond_sym = table.get(econd);
        if (cond_sym.getValue()) {
            OurSymbol then_sym = table.get(then);
            ourDrawer.eval(then);
        }
        :}
    | IF PAREN_OPEN expression:econd PAREN_CLOSE sentencia_dib:then ELSE sentencia_dib:else 
        {:
        OurSymbol cond_sym = table.get(econd);
        if (cond_sym.getValue()) {
            OutSymbol then_sym = table.get(then);
            ourDrawer.eval(then_sym.getValue());
        }
        else {
            ourDrawer.eval(else_sym.GetValue());
        }
        :}
    | REPEAT PAREN_OPEN expression:econd PAREN_CLOSE TIMES sentencia_dib:rbody
        {:
        :}
    ;

sentencia_dib ::=
    DRAW expression
        {:
        /*
        draw, int = avazar el cursor ang unidades
        draw, did = reproducir un dibujo almacenado
        */
        OurSymbol res = table.get(e)
        if (res.getType().equals("int")) {
            drawer.draw(res.getValue());
        }
        else if (res.getType().equals("draw_id")) {
            drawer.drawNameDraw(res.getValue());
        }
        :}
    | MOVE expression:e
        {:
        /*
        move, int = avanzar el cursor ang unidades sin dibujar
        move, ang = rotar el cursor
        */
        OurSymbol res= table.get(res.getValue())
        if (res.getType().equals("int")) {
            drawer.move(res.getValue())
        }
        else if (res.getType().equals("angle")) {
            drawer.rotate(res.getValue())
        }
        :}
    ;
expression ::=
    expression:e1 ADD expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
                throw new Exception("Error: los operandos deben ser del mismo tipo.");

            String type = e1s.getType();

            RESULT = table.addAnonymVar(type,
                                        e1s.getValue()+e2s.getValue());
        :}
    | expression:e1 SUB expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
                throw new Exception("Error: los operandos deben ser del mismo tipo.");

            String type = e1s.getType();

            RESULT = table.addAnonymVar(type,
                                        e1s.getValue()-e2s.getValue());
        :}
    | expression:e1 MUL expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

             if((e1s.getType() == e2s.getType()) &&
                 e1s.getType() == "angle")
                throw new Exception("Error: los operandos no pueden ser ambos de tipo angulo.");

             String type = "int";

             if(e1s.getType() == "angle" || e2s.getType() == "angle")
                type = "angle";

             RESULT = table.addAnonymVar(type,
                                         e1s.getValue()*e2s.getValue());

        :}
    | expression:e1 DIV expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if((e1s.getType() == e2s.getType()) &&
               e1s.getType() == "angle")
               throw new Exception("Error: los operandos no pueden ser ambos de tipo angulo.");

            if((e1s.getType() != e2s.getType()) &&
               e1s.getType() != "angle")
               throw new Exception("Error: solo el primero de los operandos puede ser de tipo angulo.");

            String type = "int";

            if(e1s.getType() == "angle")
               type = "angle";

            RESULT = table.addAnonymVar(type,
                                        e1s.getValue()/e2s.getValue());
        :}
    | expression:e1 LT expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
               throw new Exception("Error: los operandos deben ser del mismo tipo.");

            RESULT = table.addAnonymVar("int", (e1s.getValue() < e2s.getValue())?1:0);
        :}
    | expression:e1 GT expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
               throw new Exception("Error: los operandos deben ser del mismo tipo.");

            RESULT = table.addAnonymVar("int", (e1s.getValue() > e2s.getValue())?1:0);
        :}
    | expression:e1 LT_EQ expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
               throw new Exception("Error: los operandos deben ser del mismo tipo.");

            RESULT = table.addAnonymVar("int", (e1s.getValue() >= e2s.getValue())?1:0);
        :}
    | expression:e1 GT_EQ expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
               throw new Exception("Error: los operandos deben ser del mismo tipo.");

            RESULT = table.addAnonymVar("int", (e1s.getValue() <= e2s.getValue())?1:0);
        :}
    | expression:e1 CONDITIONAL_AND expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
               throw new Exception("Error: los operandos deben ser del mismo tipo.");

            if(e1s.getType() != "int")
               throw new Exception("Error: los operandos no pueden ser de tipo angle.");

            int val = 0;

            if(e1s.getValue().intValue() != 0 &&
               e2s.getValue().intValue() != 0)
                val = 1;

            RESULT = table.addAnonymVar("int", val);
        :}
    | expression:e1 CONDITIONAL_OR expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
               throw new Exception("Error: los operandos deben ser del mismo tipo.");

            if(e1s.getType() != "int")
               throw new Exception("Error: los operandos no pueden ser de tipo angle.");

            int val = 0;

            if(e1s.getValue().intValue() != 0 ||
               e2s.getValue().intValue() != 0)
                val = 1;

            RESULT = table.addAnonymVar("int", val);
        :}
    | expression:e1 EQUALS expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
               throw new Exception("Error: los operandos deben ser del mismo tipo.");

            RESULT = table.addAnonymVar("int", (e1s.getValue().intValue() == e2s.getValue().intValue())?1:0);
        :}
    | expression:e1 NOT_EQUALS expression:e2
        {:
            OurSymbol e1s = table.get(e1);
            OurSymbol e2s = table.get(e2);

            if(e1s.getType() != e2s.getType())
               throw new Exception("Error: los operandos deben ser del mismo tipo.");

            RESULT = table.addAnonymVar("int", (e1s.getValue().intValue() != e2s.getValue().intValue())?1:0);
        :}
    | ADD expression:e1
        {:
            OurSymbol s = table.get(e1);
            RESULT = table.addAnonymVar(s.getType(), +s.getValue());
        :}
    | SUB expression:e1
        {:
            OurSymbol s = table.get(e1);
            RESULT = table.addAnonymVar(s.getType(), -s.getValue());
        :}
    | NOT expression:e1
        {:
            OurSymbol s = table.get(e1);
            Integer val = s.getValue();
            if(val == 0)
                RESULT = table.addAnonymVar(s.getType(), 1);
            else
                RESULT = table.addAnonymVar(s.getType(), 0);
        :}
    | PAREN_OPEN expression:e PAREN_CLOSE
        {:
            RESULT = e;
        :}
    | postfix_expression:pe
        {:
            RESULT = pe;
        :}
    ;

postfix_expression ::=
    ID:id
        {:
        if (table.isDeclared(id))
            RESULT = id;
        else
            throw new Exception("Variable no declarada: "+id);
        :}
    | INT_LITERAL:lit ANGLE
        {:
            System.out.println("INT_LITERAL ANGLE: "+lit);
            RESULT = table.addAnonymVar("angle", lit);
        :}
    | INT_LITERAL:lit
        {:
            System.out.println("INT_LITERAL: "+lit);
            RESULT = table.addAnonymVar("int", lit);
        :}
    | DEF PAREN_OPEN lista_sentencias_dib PAREN_CLOSE
        {:
        :}
    ;

lista_sentencias_dib ::=
    sentencia_dib
    | lista_sentencias_dib SCOLON sentencia_dib
    ;
