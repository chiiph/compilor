<programa>              ::= <lista_sentencias> EXIT
<lista_sentencias>      ::= <sentencia> <lista_sentencias_rest>
<lista_sentencias_rest> ::= LAMBDA
<lista_sentencias_rest> ::= SCOLON <sentencia> <lista_sentencias_rest>
<sentencia>             ::= ID ASSIGNMENT <exp>
<sentencia>             ::= <sentencia_dib> <exp> COMMA <exp> COMMA <exp>
<sentencia>             ::= CLEAR
<sentencia>             ::= SETCOLOR <exp> COMMA <exp> COMMA <exp>
<sentencia>             ::= IF PAREN_OPEN <exp> PAREN_CLOSE <sentencia_dib>
<sentencia>             ::= IF PAREN_OPEN <exp> PAREN_CLOSE <sentencia_dib> ELSE <sentencia_dib>
<sentencia>             ::= REPEAT PAREN_OPEN <exp> PAREN_CLOSE TIMES <sentencia_dib>
<sentencia_dib>         ::= DRAW <exp>
<sentencia_dib>         ::= MOVE <exp>

<exp>                                       ::=   <conditional or expression>
<conditional or expression>                 ::=   <conditional and expression> <rest conditional or expression>
<conditional or expression>                 ::=   PAREN_OPEN <conditional and expression> PAREN_CLOSE <rest conditional or expression>
<rest conditional or expression>            ::=   CONDITIONAL_OR <conditional or expression>
<rest conditional or expression>            ::=   LAMBDA
<conditional and expression>                ::=   <equality expression> <rest conditional and expression>
<conditional and expression>                ::=   PAREN_OPEN <equality expression> PAREN_CLOSE <rest conditional and expression>
<rest conditional and expression>           ::=   LAMBDA
<rest conditional and expression>           ::=   CONDITIONAL_AND <conditional and expression>
<equality expression>                       ::=   <relational expression> <rest equality expression>
<equality expression>                       ::=   PAREN_OPEN <relational expression> PAREN_CLOSE <rest equality expression>
<rest equality expression>                  ::=   EQUALS <equality expression>
<rest equality expression>                  ::=   NOT_EQUALS <equality expression>
<rest equality expression>                  ::=   LAMBDA
<relational expression>                     ::=   <additive expression> <rest relational expression>
<relational expression>                     ::=   PAREN_OPEN <additive expression> PAREN_CLOSE <rest relational expression>
<rest relational expression>                ::=   LT <relational expression>
<rest relational expression>                ::=   GT <relational expression>
<rest relational expression>                ::=   LT_EQ <relational expression>
<rest relational expression>                ::=   GT_EQ <relational expression>
<rest relational expression>                ::=   LAMBDA
<additive expression>                       ::=   <multiplicative expression> <rest additive expression>
<additive expression>                       ::=   PAREN_OPEN <multiplicative expression> PAREN_CLOSE <rest additive expression>
<rest additive expression>                  ::=   ADD <additive expression>
<rest additive expression>                  ::=   SUB <additive expression>
<rest additive expression>                  ::=   LAMBDA
<multiplicative expression>                 ::=   <unary expression> <rest multiplicative expression>
<rest multiplicative expression>            ::=   MUL <multiplicative expression>
<rest multiplicative expression>            ::=   DIV <multiplicative expression>
<rest multiplicative expression>            ::=   MOD <multiplicative expression>
<rest multiplicative expression>            ::=   LAMBDA
<unary expression>                          ::=   ADD <unary expression>
<unary expression>                          ::=   SUB <unary expression>
<unary expression>                          ::=   <unary expression not plus minus>
<unary expression not plus minus>           ::=   <postfix expression>
<unary expression not plus minus>           ::=   NOT <unary expression>
<postfix expression>                        ::=   ID
<postfix expression>                        ::=   INT_LITERAL <rest postfix expression>
<rest postfix expression>                   ::=   ANGLE
<rest postfix expression>                   ::=   LAMBDA
