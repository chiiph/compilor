Programas
<compilation unit>                ::=    [ <type declarations> ]

Declaraciones
<type declarations>               ::=    <type declaration> | <type declarations> <type declaration>
<type declaration>                ::=    <class declaration>
<class declaration>               ::=    PUBLIC CLASS IDENTIFIER [ <super> ] <class body>
<super>                           ::=    ENTENDS <class type>
<class body>                      ::=    BRACE_OPEN [ <class body declarations> ] BRACE_CLOSE
<class body declarations>         ::=    <class body declaration> | <class body declarations> <class body declaration>
<class body declaration>          ::=    <class member declaration> | <constructor declaration>
<class member declaration>        ::=    <field declaration> | <method declaration>
<constructor declaration>         ::=    <constructor modifier> <constructor declarator> <constructor body>
<constructor modifier>            ::=    PUBLIC | PROTECTED
<constructor declarator>          ::=    <simple type name> PAREN_OPEN [ <formal parameter list> ] PAREN_CLOSE
<simple type name>                ::=    IDENTIFIER
<formal parameter list>           ::=    <formal parameter> | <formal parameter list> SEPARATOR(COMMA) <formal parameter>
<formal parameter>                ::=    <type> <variable declarator id> 
<constructor body>                ::=    BRACE_OPEN [ <explicit constructor invocation> ] [ <block statements> ] BRACE_CLOSE
<explicit constructor invocation> ::=    THIS PAREN_OPEN [<argumentlist>] PAREN_CLOSE SCOLON | SUPER PAREN_OPEN [<argumentlist>] PAREN_CLOSE SCOLON 
<field declaration>               ::=    <field modifiers> <type> <variable declarators> SCOLON
<field modifiers>                 ::=    <field modifier> | <field modifiers> <field modifier>
<field modifier>                  ::=    PUBLIC | PROTECTED | STATIC
<variable declarators>             ::=  <variable declarator> | <variable declarators> SEPARATOR(It's a-me a comma) <variable declarator>
<variable declarator>              ::=  <variable declarator id> | <variable declarator id> ASSIGNMENT <variable initializer>
<variable declarator id>           ::=  IDENTIFIER
<variable initializer>             ::=  <expression>
<method declaration>               ::=  <method header> <method body>
<method header>                    ::=  <method modifiers> <result type> <method declarator>
<result type>                      ::=  <type> | VOID_TYPE
<method modifiers>                 ::=  <method modifier> | <method modifiers> <method modifier>
<method modifier>                  ::=  PUBLIC | PROTECETD | STATIC
<method declarator>                ::=  IDENTIFIER PAREN_OPEN [ <formal parameter list> ] PAREN_CLOSE
<method body>                      ::=  <block>

Tipos
<type>                             ::=  <primitive type> | <reference type>
<primitive type>                   ::=  <numeric type> | BOOLEAN_TYPE
<numeric type>                     ::=  <integral type>
<integral type>                    ::=  INT | CHAR
<reference type>                   ::=  <class type>
<class type>                       ::=  <type name>
<type name>                        ::=  IDENTIFIER

Bloques y Sentencias
<block>                                  ::=   BRACE_OPEN [ <block statements> ] BRACE_CLOSE
<block statements>                       ::=    <block statement> | <block statements> <block statement>
<block statement>                        ::=    <local variable declaration statement> | <statement>
<local variable declaration statement>   ::=    <local variable declaration> SCOLON
<local variable declaration>             ::=    <type> <variable declarators>
<statement>                              ::=    <statement without trailing substatement> | <if then statement> | <if then else statement> | <while statement>
<statement no short if>                      ::=    <statement without trailing substatement> | <if then else statement no short if> | <while statement no short if>
<statement without trailing substatement>    ::=    <block> | <empty statement> | <expression statement> | <return statement>
<empty statement>                            ::=    SCOLON
<expression statement>                       ::=    <statement expression> SCOLON
<statement expression>                       ::=    <assignment> | <method invocation> | <class instance creation expression>
<if then statement>                          ::=    IF PAREN_OPEN <expression> PAREN_CLOSE <statement>
<if then else statement>                     ::=    IF PAREN_OPEN <expression> PAREN_CLOSE <statement no short if> ELSE <statement>
<if then else statement no short if>         ::=    IF PAREN_OPEN <expression> PAREN_CLOSE <statement no short if> ELSE <statement no short if>
<while statement>                            ::=    WHILE PAREN_OPEN <expression> PAREN_CLOSE <statement> 
<while statement no short if>                ::=    WHILE PAREN_OPEN <expression> PAREN_CLOSE <statement no short if>
<return statement>                           ::=    RETURN [ <expression> ] SCOLON

Expresiones
<expression>                       ::=   <assignment expression>
<assignment expression>            ::=   <conditional expression> | <assignment>
<assignment>                       ::=   <left hand side> <assignment operator> <assignment expression>
<left hand side>                   ::=   <expression name> | <field access>
<expression name>                  ::=   IDENTIFIER
<assignment operator>              ::=   ASSIGNMENT
<conditional expression>           ::=   <conditional or expression> 
<conditional or expression>        ::=   <conditional and expression> | <conditional or expression> CONDITIONAL_OR <conditional and expression> 
<conditional and expression>       ::=   <equality expression> | <conditional and expression> CONDITIONAL_AND <equality expression>
<equality expression>              ::=   <relational expression> | <equality expression> EQUALS <relational expression> | <equality expression> NOT_EQUALS <relational expression>
<relational expression>            ::=   <additive expression> | <relational expression> LT <additive expression> | <relational expression> GT <additive expression> | <relational expression> LT_EQ <additive expression> | <relational expression> GT_EQ <additive expression>
<additive expression>                   ::=         <multiplicative expression> | <additive expression> ADD <multiplicative expression> | <additive expression> SUB <multiplicative expression>
<multiplicative expression>             ::=         <unary expression> | <multiplicative expression> MUL <unary expression> | <multiplicative expression> DIV <unary expression> | <multiplicative expression> MOD <unary expression>
<unary expression>                      ::=         ADD <unary expression> | SUB <unary expression> | <unary expression not plus minus>
<unary expression not plus minus>       ::=       <postfix expression> | NOT <unary expression>
<postfix expression>                    ::=   <primary> | <expression name>
<primary>                               ::=         <literal> | THIS | PAREN_OPEN <expression> PAREN_CLOSE | <class instance creation expression> | <field access> | <method invocation>
<class instance creation expression>    ::=            NEW <class type> PAREN_OPEN [ <argument list> ] PAREN_CLOSE
<argument list>                         ::=      <expression> | <argument list> SEPARATOR(comma) <expression>
<field access>                          ::=  <primary> ACCESSOR IDENTIFIER | SUPER ACCESSOR IDENTIFIER
<method invocation>                     ::=   <method name> PAREN_OPEN [ <argument list> ] PAREN_CLOSE | <primary> ACCESSOR IDENTIFIER PAREN_OPEN [ <argument list> ] PAREN_CLOSE | SUPER ACCESOR IDENTIFIER PAREN_OPEN [ <argument list> ] PAREN_CLOSE
<method name>                           ::=   IDENTIFIER

<literal>   ::=   INT_LITERAL | <boolean literal> | CHAR_LIT | STRING_LIT | NULL
<boolean literal ::= TRUE | FALSE
