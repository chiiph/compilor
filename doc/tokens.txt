
.Alfabeto de entrada:


.Definicion de Tokens

|===
[options="header"]
|Token          |Expresion regular                    |Ejemplos
|IDENTIFIER     |[a-zA-Z_\$][a-zA-Z_\$0-9]*           |hola
|SEPARATOR      |[ \t\n\r]                            |
|INT_LITERAL    |(0|[1-9]([0-9])*)                    |42
|CHAR_LITERAL   |((\'[^('\\)\')|(\'[\\\\|\\'|\\\"|\\n]\')) |'q'
|STRING_LITERAL |(\"\"|\"[^(\"\\)|[\\\\|\\'|\\\"|\\n]\") |"hola"
////
|    PERIOD
|    SPACE
|    TAB
////
|SCOLON         |;                                    |
|BRACE_OPEN     |\{                                   |
|BRACE_CLOSE    |\}                                   |
|PAREN_OPEN     |\)                                   |
|PAREN_CLOSE    |\(                                   |
|CLASS          |class                                |
|EXTENDS        |extends                              |
|PUBLIC         |public                               |
|PROTECTED      |protected                            |
|STATIC         |static                               |
|THIS           |this                                 |
|SUPER          |super                                |
|VOID_TYPE      |void                                 |
|BOOLEAN_TYPE   |bool                                 |
|INT_TYPE       |int                                  |
|CHAR_TYPE      |char                                 |
|IF             |if                                   |
|THEN           |then                                 |
|ELSE           |else                                 |
|WHILE          |while                                |
|RETURN         |return                               |
|TRUE           |true                                 |
|FALSE          |false                                |
|NULL           |null                                 |
|NEW            |new                                  |
|ASSIGNMENT     |=                                    |
|CONDITIONAL_AND|&&                                   |
|EQUALS         |==                                   |
|NOT_EQUALS     |!=                                   |
|LT             |<                                    |
|GT             |>                                    |
|LT_EQ          |<=                                   |
|GT_EQ          |>=                                   |
|ADD            |+                                    |
|SUB            |-                                    |
|MUL            |*                                    |
|DIV            |\/                                   |
|MOD            |%                                    |
|NOT            |!                                    |
|ACCESSOR       |.                                    |
|EOF            |<EOF>                                |
////
|BOOLEAN_LITERAL
////
|===

*Aclaracion:* las entradas que no cuentan con ejemplos tienen un unico representante, igual a la expresion regular con la cual coincide.
Preguntar:
* el punto lo identificamos como separador, pero a diferencia del espacio, puede producir errores
  hay que reconocerlo aparte, o conviene hacerlo, o no?
* sintaxis de las expr reg
* las palabras reservadas conviene agruparlas bajo un token comun?
