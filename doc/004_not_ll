# VER:
# * Se permiten cosas como:
# algo;
# esta bien?
# * Se pueden hacer cosas como this.algo() = "asd"; // tal vez algo devuelve un string y es una referencia...... o algo asi

# Problemas encontrados:
# - NOTA(ver mas abajo): antes era <variable declarators>, pero permitia cosas como: algo = 3, algomas = 4;, asi que se "forzo" un camino dentro de la regla
#
# - esto permite cosas como algo.alg()();
#<rest method invocation>                    ::=   PAREN_OPEN <rest2 method invocation>:argList <rest method invocation>:(_type, )
# Se puede checkear facilmente en la parte semantica. Esta bien eso? o arreglamos la gramatica?

# TODO: terminar de actualizar primary para devolver (first, last)
# TODO: ver rest2_primary, en syntaxor rest primary se llamaba en ambos, aca no (igual lo cambie aca)

# NOTA: el SUPER en primary ahora entra en method invocation directamente

Programas
<compilation unit>                          ::=   <type declarations>:decls
{ return decls }

Declaraciones
<type declarations>                         ::=   <class declaration>:classdecl <type declarations>:rest
{ return [classdecl] + rest }
<type declarations>                         ::=   LAMBDA
{ return [] }
<class declaration>                         ::=   PUBLIC CLASS IDENTIFIER:id <rest class declaration>:(ext_id, decls)
{ return mjClass(id, ext_id, decls) }
<rest class declaration>                    ::=   <class body>:decls
{ return (None, decls) }
<rest class declaration>                    ::=   ENTENDS IDENTIFIER:id <class body>:decls
{ return (id, decls) }
<class body>                                ::=   BRACE_OPEN <rest class body>:decls
{ return decls }
<rest class body>                           ::=   BRACE_CLOSE
{ return [] }
<rest class body>                           ::=   <class body declarations>:decls BRACE_CLOSE
{ return decls }
<class body declarations>                   ::=   <class body declaration>:decl <rest class body declarations>:rest
{ return [decl] + rest }
<rest class body declarations>              ::=   LAMBDA
{ return [] }
<rest class body declarations>              ::=   <class body declarations>:decls
{ return decls }
<class body declaration>                    ::=   <field modifiers>:modifs <rest class body declaration>:(method_decl, id, init, list_ids, method_body)
{
  if method_decl:
    if init == None: # constructor
      return mjMethod(modifs = modifs, ret_type = None, name = id, params = list_ids, body = method_body)
    else:
      return mjMethod(modifs = modifs, ret_type = id, name = init, params = list_ids, body = method_body)
  else:
    # id es el tipo (custom, o primitive)
    return mjClassVariableDecl(modifs, id, list_ids)
}
<rest class body declaration>               ::=   <type noident void>:_type <declarators>:(method_decl, init, list_ids, method_body)
{
  return (method_decl, _type, init, list_ids, method_body)
}
<rest class body declaration>               ::=   IDENTIFIER:id <rest2 class body declaration>:(method_decl, init, list_ids, method_body)
{
  # agregamos un campo mas: el id, que es el tipo de return si es method_decl y no constructor
  # o el nombre del constructor (que desp hay qeu ver que sea igual al de la clase)
  if method_decl:
    if init == None: # entonces constructor declarator
      return (method_decl, id, None, list_ids, method_body) # todavia faltan los field modifiers
    else: # method decl comun, y id es un tipo custom de return
      return (method_decl, id, init, list_ids, method_body)
  else:
    # aca init es seguro que es none cuando llega?
    return (method_decl, id, None, list_ids, None)
}
<rest2 class body declaration>              ::=   <constructor declarator>:params <constructor body>:body
{
  # Se detecta que es un constructor, porque el campo que corresponde al id (el segundo) es None
  return (True, None, params, body)
}
<rest2 class body declaration>              ::=   <declarators>:(method_decl, init, list_ids, method_body)
{
  return (method_decl, init, list_ids, method_body)
}
<constructor declarator>                    ::=   PAREN_OPEN <rest constructor declarator>:params
{ return params }
<rest constructor declarator>               ::=   PAREN_CLOSE
{ return [] }
<rest constructor declarator>               ::=   <formal parameter list>:params PAREN_CLOSE
{ return params }
<formal parameter list>                     ::=   <formal parameter>:param <rest formal parameter list>:rest_params
{ return [param] + rest_params }
<rest formal parameter list>                ::=   COMMA <formal parameter list>:params
{ return params }
<rest formal parameter list>                ::=   LAMBDA
{ return [] }
<formal parameter>                          ::=   <type>:_type IDENTIFIER:id
{ return (_type, id) }
<constructor body>                          ::=   BRACE_OPEN <rest constructor body>:body
{ return body }
<rest constructor body>                     ::=   BRACE_CLOSE
{ return mjBlock() } # un bloque vacio
<rest constructor body>                     ::=   <block statements>:stats BRACE_CLOSE
{ return mjBlock(stats) }

<field modifiers>                           ::=   <field modifier>:modif <rest field modifiers>:rest_modif
{ return [modif] + rest_modif }
<rest field modifiers>                      ::=   LAMBDA
{ return [] }
<rest field modifiers>                      ::=   <field modifiers>:modif
{ return modif }
<field modifier>                            ::=   PUBLIC
{ return PUBLIC }
<field modifier>                            ::=   PROTECTED
{ return PROTECTED }
<field modifier>                            ::=   STATIC
{ return STATIC }

<declarators>                               ::=   IDENTIFIER:id <rest declarators>:(method_decl, init, list_ids, method_body)
{
  if method_decl:
    return (method_decl, id, list_ids, method_body)
  else:
    return (method_decl, None, [(id, init)] + list_ids, method_body)
}
<rest declarators>                          ::=   COMMA IDENTIFIER:id <rest2 declarators>:(method_decl, initializer, list_ids, method_body)
{ return (False, None, [(id, initializer)] + list_ids, None) }
<rest declarators>                          ::=   ASSIGNMENT <expression>:expr <rest2 declarators>:(method_decl, initializer, list_ids, method_body)
{ return (False, expr, list_ids, None) }
<rest declarators>                          ::=   PAREN_OPEN <rest method declarator>:params <method body>:bl
{ return (True, None, params, bl) }
<rest declarators>                          ::=   SCOLON
{ return (False, None, [], None) }
<rest2 declarators>                          ::=   COMMA IDENTIFIER:id <rest2 declarators>:(method_decl, init, list_ids, method_body)
{ return (False, None, [(id, initializer)] + list_ids, None) }
<rest2 declarators>                          ::=   ASSIGNMENT <expression>:expr <rest2 declarators>:(method_decl, init, list_ids, method_body)
{ return (False, expr, list_ids, method_body) }
<rest2 declarators>                          ::=   SCOLON
{ return (False, None, [], None) }

<rest method declarator>                    ::=   PAREN_CLOSE
{ return [] }
<rest method declarator>                    ::=   <formal parameter list>:params PAREN_CLOSE
{ return params }
<method body>                               ::=   <block>:bl
{ return bl }

Tipos
<type>                                      ::=   <primitive type>:prim_type
{ return prim_type }
<type>                                      ::=   IDENTIFIER:type_id
{ return type_id }
<type>                                      ::=   VOID_TYPE
{ return VOID_TYPE }
<type noident void>                         ::=   <primitive type>:prim_type
{ return prim_type }
<type noident void>                         ::=   VOID_TYPE
{ return VOID_TYPE }
<primitive type>                            ::=   <numeric type>:num_type
{ return num_type }
<primitive type>                            ::=   <boolean type>:bool_type
{ return bool_type }
<numeric type>                              ::=   <integral type>:int_type
{ return int_type }
<integral type>                             ::=   INT_TYPE
{ return INT_TYPE }
<integral type>                             ::=   CHAR_TYPE
{ return CHAR_TYPE }
<boolean type>                              ::=   BOOLEAN_TYPE
{ return BOOLEAN_TYPE }

Bloques y Sentencias
<block>                                     ::=   BRACE_OPEN <rest block>:rest
{ return mjBlock(rest) }
<rest block>                                ::=   BRACE_CLOSE
{ return [] }
<rest block>                                ::=   <block statements>:blstats BRACE_CLOSE
{ return blstats }
<block statements>                          ::=   <block statement>:(giveant, blstat) <rest block statements>:rest
{
  return [blstat] + rest
}
<rest block statements>                     ::=   LAMBDA
{ return [] }
<rest block statements>                     ::=   <block statements>:blstats
{ return blstats } # blstat es una list

<block statement>                           ::=   <primitive type>:primitive_type <local variable declaration statement>:vardecl
{ return mjVariableDecl(primitive_type, vardecl) }
<block statement>                           ::=   <if start statement>:ifstat
{ return ifstat }
<block statement>                           ::=   <while statement>:whilestat
{ return whilestat }
<block statement>                           ::=   <block>:bl
{ return bl }
<block statement>                           ::=   <empty statement>
{ return None }
<block statement>                           ::=   <return statement>:retstat
{ return retstat }
<block statement>(anterior)                 ::=   <primary>:(prim_first, prim_last) <rest method invocation>:(where, _type, expr, first, last)
{
  # Aca se maneja todo en primary, saco el rest?
  return prim_last
}
<local variable declaration statement>      ::=   <local variable declaration>:localvar SCOLON
{ return localvar }
<local variable declaration>                ::=   IDENTIFIER:id <variable declarators>:(vardecls, rest)
{ return [(id, vardecls)] + rest }

<variable declarators>                      ::=   <variable declarator>:vardecl <rest variable declarators>:rest
{ return (vardecl, rest) }
<rest variable declarators>                 ::=   LAMBDA
{ return [] }
<rest variable declarators>                 ::=   COMMA IDENTIFIER:id <variable declarators>:expr
{ return [(id, expr)] }
<variable declarator>                       ::=   <rest variable declarator>:expr
{ return expr }
<rest variable declarator>                  ::=   LAMBDA
{ return None }
<rest variable declarator>                  ::=   ASSIGNMENT <expression>:expr
{ return expr }
<statement>                                 ::=   <statement without trailing substatement>:stat
{ return stat }
<statement>                                 ::=   <if start statement>:ifstat
{ return ifstat }
<statement>                                 ::=   <while statement>:whilestat
{ return whilestat }
<statement without trailing substatement>   ::=   <block>:bl
{ return bl }
<statement without trailing substatement>   ::=   <empty statement>
{ return None }
<statement without trailing substatement>   ::=   <expression statement>:expr
{ return expr }
<statement without trailing substatement>   ::=   <return statement>:ret
{ return ret }
<empty statement>                           ::=   SCOLON
{ return None }
<expression statement>                      ::=   <statement expression>:expr SCOLON
{ return expr }
<statement expression>                      ::=   <method invocation>:methodinv
{ return methodinv }
<if start statement>                        ::=   IF PAREN_OPEN <expression>:expr PAREN_CLOSE <statement>:stat <rest if start statement>:elsestat
{ return mjIf(expr, stat, elsestat) }
<rest if start statement>                   ::=   LAMBDA
{ return None }
<rest if start statement>                   ::=   ELSE <statement>:stat
{ return stat }
<while statement>                           ::=   WHILE PAREN_OPEN <expression>:expr PAREN_CLOSE <statement>:stat
{ return mjWhile(expr, stat) }
<return statement>                          ::=   RETURN <rest return statement>:expr
{ return mjReturn(expr) }
<rest return statement>                     ::=   SCOLON
{ return None }
<rest return statement>                     ::=   <expression>:expr SCOLON
{ return expr }

Expresiones
<expression>                                ::=   <assignment expression>:ae
{ return ae }
<assignment expression>                     ::=   <conditional expression>:ce
{ return ce }

# se patea el control sintactico a la etapa semantico
<conditional expression>                    ::=   <conditional or expression>:expr <rest conditional expression>:(op, ce)
{
  if op != None:
    return op(expr, ce)
  else:
    return expr
}
<rest conditional expression>               ::=   LAMBDA
{ return (None, None) }
<rest conditional expression>               ::=   ASSIGNMENT <conditional expression>:ce
{ return (mjAssignment, ce) }
<conditional or expression>                 ::=   <conditional and expression>:expr <rest conditional or expression>:(op, coe)
{
  if op != None:
    return op(expr, coe)
  else:
    return expr
}
<rest conditional or expression>            ::=   CONDITIONAL_OR <conditional or expression>:coe
{ return (mjOr, coe) }
<rest conditional or expression>            ::=   LAMBDA
{ return (None, None) }
<conditional and expression>                ::=   <equality expression>:expr <rest conditional and expression>:(op, cae)
{
  if op != None:
    return op(expr, cae)
  else:
    return expr
}
<rest conditional and expression>           ::=   LAMBDA
{ return (None, None) }
<rest conditional and expression>           ::=   CONDITIONAL_AND <conditional and expression>:cae
{ return (mjAnd, cae) }
<equality expression>                       ::=   <relational expression>:expr <rest equality expression>:(op, ee)
{
  if op != None:
    return op(expr, ee)
  else:
    return expr
}
<rest equality expression>                  ::=   EQUALS <equality expression>:ee
{ return (mjEq, re) }
<rest equality expression>                  ::=   NOT_EQUALS <equality expression>:ee
{ return (mjNotEq, re) }
<rest equality expression>                  ::=   LAMBDA
{ return (None, None) }
<relational expression>                     ::=   <additive expression>:expr <rest relational expression>:(op, re)
{
  if op != None:
    return op(expr, re)
  else:
    return expr
}
<rest relational expression>                ::=   LT <relational expression>:re
{ return (mjLt, re) }
<rest relational expression>                ::=   GT <relational expression>:re
{ return (mjGt, re) }
<rest relational expression>                ::=   LT_EQ <relational expression>:re
{ return (mjLtEq, re) }
<rest relational expression>                ::=   GT_EQ <relational expression>:re
{ return (mjGtEq, re) }
<rest relational expression>                ::=   LAMBDA
{ return (None, None) }
<additive expression>                       ::=   <multiplicative expression>:expr <rest additive expression>:(op, ae)
{
  if op != None:
    return op(expr, ae)
  else:
    return expr
}
<rest additive expression>                  ::=   ADD <additive expression>:ae
{ return (mjAdd, ae) }
<rest additive expression>                  ::=   SUB <additive expression>:ae
{ return (mjSub, ae) }
<rest additive expression>                  ::=   LAMBDA
{ return (None, None) }
<multiplicative expression>                 ::=   <unary expression>ue <rest multiplicative expression>:(op, me)
{ return op(ue, me) }
<rest multiplicative expression>            ::=   MUL <multiplicative expression>:me
{ return (mjMul, me) }
<rest multiplicative expression>            ::=   DIV <multiplicative expression>:me
{ return (mjDiv, me) }
<rest multiplicative expression>            ::=   MOD <multiplicative expression>:me
{ return (mjMod, me) }
<rest multiplicative expression>            ::=   LAMBDA
{ return (None, None) }
<unary expression>                          ::=   ADD <unary expression>:un
{ return mjAdd(un) }
<unary expression>                          ::=   SUB <unary expression>:un
{ return mjSub(un) }
<unary expression>                          ::=   <unary expression not plus minus>:un
{ return un }
<unary expression not plus minus>           ::=   <postfix expression>:prim_last
{ return prim_last }
<unary expression not plus minus>           ::=   NOT <unary expression>:expr
{ return mjNot(expr) }
<postfix expression>                        ::=   <primary>:(prim_first, prim_last)
{ return prim_last }

<primary>                                   ::=   <literal>:lit <rest primary>:(first, last)
{
  if first == None:
    return lit
  first.from = lit
  return (list, last)
}
<primary>                                   ::=   THIS:this <rest primary>:(first, last)
{
  if first == None:
    return (this, this)
  first.from = this
  return (this, last)
}
# VER que no se si el type puede ser expr ahora mismo, pero es cuestion de cambiarlo
<primary>                                   ::=   PAREN_OPEN <expression>:expr PAREN_CLOSE <rest primary>:prim
{
  if prim == None:
    return expr
  prim.from = expr
  return prim
}
<primary>                                   ::=   <class instance creation expression>:classinst <rest primary>:prim
{
  if prim == None:
    return classinst
  prim.from = classinst
  return prim
}
<primary>                                   ::=   <method invocation>:methodinv <rest primary>:prim
{
  if prim == None:
    return methodinv
  prim.from = methodinv
  return prim
}

<rest primary>                              ::=   ACCESSOR IDENTIFIER:id <rest2 primary>:(where, argList, first, last)
{
  if where == 1:
    # entonces tenemos argList (aun cuando sea vacia), o sea, id es un method inv
    method = mjMethodInvocation(id, argList)
    if first != None:
      first.from = method
      return (method, method)
    return (method, last)
  elif where == 2:
    return (id, id)
}
<rest primary>                              ::=   LAMBDA
{ return (None, None) }

<rest2 primary>                             ::=   PAREN_OPEN <rest2 method invocation>:argList <rest primary>:(first, last)
{
  return (1, argList, first, last) # 1: es este caso
}
<rest2 primary>                             ::=   <rest primary>
{
  return (2, [], None, None) # 2: es este

<class instance creation expression>        ::=   NEW IDENTIFIER:id PAREN_OPEN <rest class instance creation expression>:argList
{
  return mjClassInstanceCreation(id, argList)
}
<rest class instance creation expression>   ::=   PAREN_CLOSE
{ return [] }
<rest class instance creation expression>   ::=   <argument list>:argList PAREN_CLOSE
{ return argList }
<argument list>                             ::=   <expression>:expr <rest argument list>:restList
{
  return [expr] + restList
}
<rest argument list>                        ::=   LAMBDA
{ return [] }
<rest argument list>                        ::=   COMMA <argument list>:argList
{
  return argList
}

<method invocation>                         ::=   IDENTIFIER:id <rest primary>:(prim_first, prim_last) <rest method invocation>(where, _type, expr, first, last)
{
  # aca ya vamos a terminar la cadena del primary,
  # enlazando id<-prim<-first y devolviendo last, que es el qeu importa en si
  # el enlazado id<-prim dependera de si prim es None o no
  if prim_first != None:
    prim_first.from = id
  # esto si bien se llama method invocation puede ser:
  # 1: asignacion
  # 2: method invocation
  # 3: acceso a campo de un obj, o algo asi
  # y lo sabemos segun el _type

  # Pero antes tenemos qeu ver si viene algo con first y last
  # y enlazarlos apropiadamente
  if first != None:
    if prim_first != None:
      first.from = prim_last
    else:
      first.from = id

# esto es para el where:
# 1: primer caso (recursivo, accessor id)
# 2: segundo (asignacion)
# 3: posible method inv, depende, pero tiene (args)
# 4: lambda

  # caso especial, el rest fue lambda, o sea qeu _type no importa
  if where == 4:
    if prim_first != None:
      return prim_last
    else:
      return id

  if where == 5:
    raise Exception() # para testear

  # si la posta es que es una asignacion...
  if _type == 1: # assignment
    if where == 1:
      if last == None:
        # entonces first es nuestro ultimo eslabon
        return mjAssignment(first, expr)
      else:
        return mjAssignment(last, expr)
    elif where == 2:
      # entonces la asignacion se hizo aca no mas
      # first y last son None
      if prim_last != None:
        return mjAssignment(prim_last, expr) #AAAAAAAAAAAAAAAAAAAAAAAAA expr puede ser tupla
      else
        return mjAssignment(id, expr) #AAAAAAAAAAAAAAAAAA expr puede ser (vardecl, rest)
    elif where == 3:
      # entonces la asignacion se hizo mas lejos, aca se hizo una llamada a un metodo con prim o id
      # y first o last o ambos son != None
      if prim != None:
        method = mjMethodInvocation(prim_last.ref, expr) # expr es argList
        prim.type = methodinv
        prim.ref = method
        if first != None:
          first.from = prim
      else:
        method = mjMethodInvocation(id.ref, expr) # expr es argList
        id.type = methodinv
        id.ref = method
        if first != None:
          first.from = id

      if first != None:
        if last != None:
          return mjAssignment(last, expr)
        else:
          return mjAssignment(first, expr)
      else:
        # ojo aca, esto es: algo.metodo() = 3; por ahi es un error?
        if prim != None:
          return mjAssignment(prim, expr)
        else:
          return mjAssignment(id, expr)
    elif where == 4:
      pass # ES IMPOSIBLE
  elif _type == 2: # method inv
    if where == 1:
      # recursivo accessor id rest
      # el enlazado ya se hizo, asi que todo esta listo, se retorna el ultimo eslavon
      if last == None:
        return last
      else:
        return first
    elif where == 2:
      # IMPOSIBLE, que venga de un assignment y tenga type method inv.
      pass
    elif where == 3:
      # entonces aca prim o id son un method inv.
      # y si first y last son None, entonces EL method inv es este y hay qeu retornar eso
      # TODO: cambiar esto con lo qeu esta en syntaxor
      if first == None and last == None:
        if prim != None:
          return mjMethodInvocation(prim_last, expr)
        else:
          return mjMethodInvocation(id, expr)
      elif first != None and last == None:
        # aca id y/o prim van a ser eslavones en una cadena arbitrariamente larga de indirecciones
        return first
      else:
        return last
    elif where == 4:
      pass # OTRO IMPOSIBLE
  elif _type == 3:
    # es simplemente un acceso a campo
    # asi qeu retornamos el ultimo eslavon
    # sin importar desde donde se viene
    if last != None:
      return last
    elif first != None:
      return first
    elif prim != None:
      return prim
    else:
      return id
  # lo qeu se va a devolver aca es un primary sobre el cual se puede hacer todo el checkeo
  # particularmente el de mas a la derecha. *SALVO* que sea una asignacion, en cuyo caso.... NO SE TODAVIA
  elif _type == 4:
    if not isId(prim_ref):
      raise Exception() # el tipo custom es un methodinv o algo invalido
    # esto es una decl de tipo custom, en expr esta la lista, y en prim_ref esta el id
}

# estos son iguales al anterior, salvo que cambia la primera parte
<method invocation>                         ::=   <literal> <rest primary> ACCESSOR IDENTIFIER PAREN_OPEN <rest2 method invocation> <rest method invocation>
<method invocation>                         ::=   THIS <rest primary> <rest method invocation>
<method invocation>                         ::=   PAREN_OPEN <expression> PAREN_CLOSE <rest primary> ACCESSOR IDENTIFIER PAREN_OPEN <rest2 method invocation> <rest method invocation>
<method invocation>                         ::=   <class instance creation expression> <rest primary> ACCESSOR IDENTIFIER PAREN_OPEN <rest2 method invocation> <rest method invocation>
<method invocation>                         ::=   SUPER <rest primary> <rest super>

# este es igual al caso 2 de rest method inv salvo que ya se tiene el nombre del primary que es el method inv de aca
<rest super>                                ::=   IDENTIFIER PAREN_OPEN <rest2 method invocation> <rest method invocation>
{
  method = mjMethodInvocation(prim_id, expr)
  if not first is None:
      first.from = method
  if where == 4:
      return (1, 2, argList, method, last)
  elif where == 2:
      raise Exception()
  elif where == 1:
      return (1, _type, argList, method, last)
  elif where == 3:
      raise Exception()
}
# este es igual al caso 2 de rest method invocation
<rest super>                                ::=   PAREN_OPEN <rest2 method invocation> <rest method invocation>
{
  method = mjMethodInvocation(prim_id, expr)
  if not first is None:
      first.from = method
  if where == 4:
      return (2, 2, argList, method, last)
  elif where == 2:
      raise Exception()
  elif where == 1:
      return (2, _type, argList, method, last)
  elif where == 3:
      raise Exception()
}

<rest super>                                ::= LAMBDA

# podriamos decir que se usan las siguientes constantes para ver desde donde se viene:
# 1: primer caso
# 2: segundo (asignacion)
# 3: posible method inv, depende
# 4: lambda
# y las siguientes para ver que es lo qeu se esta encontrando que es:
# 1: asignacion
# 2: method invocation
# 3: acceso a campo de un obj, o algo asi

<rest method invocation>                    ::=   ACCESSOR IDENTIFIER:id <rest primary>:(prim_first, prim_last) <rest method invocation>(where, _type, expr, first, last) # es lo qeu sea que rest method invocation diga que es
{
  if where == 4: # lambda
    # entonces si prim != None, este es el last, y id el first
    if prim_first != None:
      prim_first.from = id # enlazamos con el actual (aca hay que usar ref y type de un primary nuevo y enlazar eso
      return (1, _type, expr, id, prim_last)
    else:
      # sino, id es el first y el last es None
      return (1, _type, expr, id, id) # o error?
  elif where == 1:
    # si prim != None, y last != None
    # first sabemos que no va a ser None y sabemos que van a estar conectados entre si por el .from
    if prim_first != None:
      first.from = prim_last
      prim_first.from = id
    else:
      first.from = id
    return (1, _type, expr, id, last)
  elif where == 2: # asignacion
    # sabemos que first y last van a ser None
    # si prim == None, no importa, porque va a manejar despues
    prim_first.from = id
    return (1, _type, expr, id, prim_last)
  elif where == 3:
    # entonces id o prim (depende de si prim es None o no) es el nombre del metodo
    if prim_first != None:
      # prim hasta aca tiene type=id, y ref=>token, ahora ese token es el nombre del metodo
      # prim tiene type=methodInv, y ref=> a un obj methodinv
      method = mjMethodInvocation(prim_last, expr) # expr es argList
      method.from = prim_last.from
      prim_first.from = id
      if first != None: # significa que el rest method inv que se llamo desde 3 no resulto en lambda
        # entonces en _type viene el tipo real de lo ultimo que se hizo, esto seria algo asi como:
        # algo.algo1().algo3, donde algo1 es id aca o prim, el nombre del metodo, y algo3 seria el first, con last=None,
        # si fuera mas largo: algo.algo1().algo3.algo4, tendriamos last
        first.from = method # enlazamos normalmente

        return (1, _type, expr, id, last)
      else: # first == None: o sea qeu fue un lambda, se termina aca este primary,
        return (1, _type, expr,  id, prim_last)
        # si no llega a ser None, solamente nos tenemos qeu fijar que este enlazado bien
    else:
      # TODO: hacer lo mismo pero con id
  elif where == 5:
    raise Exception() # esto puede ser algo.algo1() asd;
}

# esto viene por block statements
# NOTA: antes era <variable declarators>, pero permitia cosas como: algo = 3, algomas = 4;, asi que se "forzo" un camino dentro de la regla
<rest method invocation>                    ::=   ASSIGNMENT <expression>:expr SCOLON # asignacion comun
{ return (2, 1, expr, None, None) }
<rest method invocation>                    ::=   PAREN_OPEN <rest2 method invocation>:argList <rest method invocation>:(where, _type, expr, first, last) # method inv
{
  if where == 4: # nada
    return (3, 2, argList, first, last) # method invocation, el first y el last del resto
  elif where == 2: # viene del assignment
    raise Exception() # TODO!!!
  elif where == 1: # aca es algo asi como: algo.algo2().algomas
    # entonces, a traves del where, se va a saber que lo anterior es un method inv, pero el type en si
    # es el que viene de las otras invs
    return (3, _type, argList, first, last)
  elif where == 3:
    raise Exception() # se hizo una llamada a otro metodo pero sin id! ver arriba
  elif where == 5:
    raise Exception() # este caso puede ser: algo() asd;
<rest method invocation>                    ::=   <local variable declaration>:vardecls SCOLON # declaracion de vars de tipo custom
{ return (5, 4, vardecls, None, None) }
<rest method invocation>                    ::=   LAMBDA # nada
{ return (4, None, None, None, None) }
<rest2 method invocation>                   ::=   PAREN_CLOSE
{ return [] }
<rest2 method invocation>                   ::=   <argument list>:argList PAREN_CLOSE
{ return argList }
<boolean literal>                           ::=   TRUE
<boolean literal>                           ::=   FALSE

# FALTA <literal>
